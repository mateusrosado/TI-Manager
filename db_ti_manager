CREATE DATABASE IF NOT EXISTS ti_manager_db;
USE ti_manager_db;

-- Usuários do sistema, incluindo administradores, funcionários de TI e clientes.
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL, -- Email único para cada usuário
    password VARCHAR(255) NOT NULL,
    -- Papéis: admin (empresa de TI), adm_cliente (administrador do cliente), funcionario_ti (TI alocado), funcionario_cliente (usuário final)
    role ENUM('admin', 'adm_cliente', 'funcionario_ti', 'funcionario_cliente') NOT NULL,
    -- CNPJ usado para login de admin e adm_cliente. Pode ser NULL para outros papéis.
    cnpj_login VARCHAR(18) UNIQUE NULL,
    -- CPF usado para funcionários de TI e clientes. Pode ser NULL para outros papéis.
    cpf VARCHAR(14) UNIQUE NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Empresas clientes cadastradas no sistema.
CREATE TABLE clients (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL, -- Administrador responsável pela empresa cliente
    company_name VARCHAR(100) NOT NULL,
    cnpj VARCHAR(18) UNIQUE NOT NULL, -- CNPJ único da empresa cliente
    contact VARCHAR(100), -- Informações de contato da empresa
    address TEXT,
    data_abertura TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Data de cadastro da empresa
    data_encerramento TIMESTAMP NULL, -- Data de encerramento (empresa desativada)
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Funcionários de TI vinculados a empresas clientes.
CREATE TABLE employees (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL, -- Referência ao usuário com papel de funcionário de TI
    client_id INT NULL, -- Empresa cliente à qual o funcionário está alocado
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (client_id) REFERENCES clients(id) ON DELETE SET NULL
);

-- Chamados abertos por clientes para atendimento de TI.
CREATE TABLE tickets (
    id INT AUTO_INCREMENT PRIMARY KEY,
    client_id INT NOT NULL, -- Empresa cliente relacionada ao chamado
    created_by INT NOT NULL, -- Usuário que abriu o chamado
    assigned_to INT DEFAULT NULL, -- Funcionário de TI responsável
    service_type VARCHAR(100) NOT NULL, -- Tipo de serviço solicitado
    description TEXT, -- Detalhes do problema ou solicitação
    location TEXT NOT NULL, -- Local de atendimento
    -- Status do chamado: Aberto, Pendente, Em andamento, Recusado, Encerrado
    status ENUM('Aberto', 'Pendente', 'Em andamento', 'Recusado', 'Encerrado') DEFAULT 'Aberto',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (client_id) REFERENCES clients(id),
    FOREIGN KEY (created_by) REFERENCES users(id),
    FOREIGN KEY (assigned_to) REFERENCES employees(id)
);

-- Histórico de atualizações dos chamados.
CREATE TABLE ticket_updates (
    id INT AUTO_INCREMENT PRIMARY KEY,
    ticket_id INT NOT NULL,
    updated_by INT NOT NULL, -- Usuário que realizou a atualização
    status ENUM('Aberto', 'Pendente', 'Em andamento', 'Recusado', 'Encerrado') NOT NULL,
    update_note TEXT, -- Observações sobre a atualização
    update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ticket_id) REFERENCES tickets(id) ON DELETE CASCADE,
    FOREIGN KEY (updated_by) REFERENCES users(id)
);

-- Notificações enviadas aos usuários sobre eventos de chamados.
CREATE TABLE notifications (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL, -- Usuário destinatário da notificação
    message TEXT NOT NULL,
    is_read BOOLEAN DEFAULT FALSE, -- Indica se a notificação foi lida
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Relatórios gerados no sistema.
CREATE TABLE reports (
    id INT AUTO_INCREMENT PRIMARY KEY,
    report_type ENUM('volume', 'por_data', 'tempo_medio') NOT NULL, -- Tipo de relatório
    generated_by INT NOT NULL, -- Usuário que gerou o relatório
    generated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (generated_by) REFERENCES users(id)
);
